// Mocks generated by Mockito 5.4.4 from annotations
// in budget_tracker/test/features/transactions/presentation/notifiers/category_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:budget_tracker/core/error/result.dart' as _i4;
import 'package:budget_tracker/features/transactions/domain/entities/transaction.dart'
    as _i5;
import 'package:budget_tracker/features/transactions/domain/usecases/add_category.dart'
    as _i7;
import 'package:budget_tracker/features/transactions/domain/usecases/delete_category.dart'
    as _i9;
import 'package:budget_tracker/features/transactions/domain/usecases/get_categories.dart'
    as _i2;
import 'package:budget_tracker/features/transactions/domain/usecases/update_category.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetCategories].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategories extends _i1.Mock implements _i2.GetCategories {
  MockGetCategories() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.TransactionCategory>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>.value(
                _i6.dummyValue<_i4.Result<List<_i5.TransactionCategory>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>);
}

/// A class which mocks [AddCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCategory extends _i1.Mock implements _i7.AddCategory {
  MockAddCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.TransactionCategory>> call(
          _i5.TransactionCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [category],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.TransactionCategory>>.value(
            _i6.dummyValue<_i4.Result<_i5.TransactionCategory>>(
          this,
          Invocation.method(
            #call,
            [category],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.TransactionCategory>>);
}

/// A class which mocks [UpdateCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCategory extends _i1.Mock implements _i8.UpdateCategory {
  MockUpdateCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.TransactionCategory>> call(
          _i5.TransactionCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [category],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.TransactionCategory>>.value(
            _i6.dummyValue<_i4.Result<_i5.TransactionCategory>>(
          this,
          Invocation.method(
            #call,
            [category],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.TransactionCategory>>);
}

/// A class which mocks [DeleteCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategory extends _i1.Mock implements _i9.DeleteCategory {
  MockDeleteCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<void>> call(String? categoryId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [categoryId],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #call,
            [categoryId],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);
}
