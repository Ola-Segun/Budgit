// Mocks generated by Mockito 5.4.4 from annotations
// in budget_tracker/test/features/transactions/domain/usecases/add_category_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:budget_tracker/core/error/result.dart' as _i4;
import 'package:budget_tracker/features/transactions/domain/entities/transaction.dart'
    as _i5;
import 'package:budget_tracker/features/transactions/domain/repositories/transaction_category_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TransactionCategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionCategoryRepository extends _i1.Mock
    implements _i2.TransactionCategoryRepository {
  MockTransactionCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.TransactionCategory>>> getAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>.value(
                _i6.dummyValue<_i4.Result<List<_i5.TransactionCategory>>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>);

  @override
  _i3.Future<_i4.Result<_i5.TransactionCategory?>> getById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.TransactionCategory?>>.value(
            _i6.dummyValue<_i4.Result<_i5.TransactionCategory?>>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.TransactionCategory?>>);

  @override
  _i3.Future<_i4.Result<List<_i5.TransactionCategory>>> getByType(
          _i5.TransactionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByType,
          [type],
        ),
        returnValue:
            _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>.value(
                _i6.dummyValue<_i4.Result<List<_i5.TransactionCategory>>>(
          this,
          Invocation.method(
            #getByType,
            [type],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.TransactionCategory>>>);

  @override
  _i3.Future<_i4.Result<_i5.TransactionCategory>> add(
          _i5.TransactionCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [category],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.TransactionCategory>>.value(
            _i6.dummyValue<_i4.Result<_i5.TransactionCategory>>(
          this,
          Invocation.method(
            #add,
            [category],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.TransactionCategory>>);

  @override
  _i3.Future<_i4.Result<_i5.TransactionCategory>> update(
          _i5.TransactionCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [category],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.TransactionCategory>>.value(
            _i6.dummyValue<_i4.Result<_i5.TransactionCategory>>(
          this,
          Invocation.method(
            #update,
            [category],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.TransactionCategory>>);

  @override
  _i3.Future<_i4.Result<void>> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #delete,
            [id],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<bool>> isCategoryInUse(String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCategoryInUse,
          [categoryId],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #isCategoryInUse,
            [categoryId],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);
}
