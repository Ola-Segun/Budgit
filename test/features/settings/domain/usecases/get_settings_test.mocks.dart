// Mocks generated by Mockito 5.4.4 from annotations
// in budget_tracker/test/features/settings/domain/usecases/get_settings_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:budget_tracker/core/error/result.dart' as _i4;
import 'package:budget_tracker/features/settings/domain/entities/settings.dart'
    as _i5;
import 'package:budget_tracker/features/settings/domain/repositories/settings_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i2.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.AppSettings>> getSettings() => (super.noSuchMethod(
        Invocation.method(
          #getSettings,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i5.AppSettings>>.value(
            _i6.dummyValue<_i4.Result<_i5.AppSettings>>(
          this,
          Invocation.method(
            #getSettings,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i5.AppSettings>>);

  @override
  _i3.Future<_i4.Result<void>> saveSettings(_i5.AppSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [settings],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #saveSettings,
            [settings],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> updateSetting(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSetting,
          [
            key,
            value,
          ],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #updateSetting,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> resetToDefaults() => (super.noSuchMethod(
        Invocation.method(
          #resetToDefaults,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #resetToDefaults,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<String>> exportData(_i5.DataExportType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportData,
          [type],
        ),
        returnValue: _i3.Future<_i4.Result<String>>.value(
            _i6.dummyValue<_i4.Result<String>>(
          this,
          Invocation.method(
            #exportData,
            [type],
          ),
        )),
      ) as _i3.Future<_i4.Result<String>>);

  @override
  _i3.Future<_i4.Result<void>> importData(
    String? data,
    _i5.DataExportType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #importData,
          [
            data,
            type,
          ],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #importData,
            [
              data,
              type,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<void>>.value(_i6.dummyValue<_i4.Result<void>>(
          this,
          Invocation.method(
            #clearAllData,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<String>> getAppVersion() => (super.noSuchMethod(
        Invocation.method(
          #getAppVersion,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<String>>.value(
            _i6.dummyValue<_i4.Result<String>>(
          this,
          Invocation.method(
            #getAppVersion,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<String>>);

  @override
  _i3.Future<_i4.Result<bool>> isBiometricAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isBiometricAvailable,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #isBiometricAvailable,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);

  @override
  _i3.Future<_i4.Result<bool>> authenticateWithBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateWithBiometrics,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #authenticateWithBiometrics,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);
}
